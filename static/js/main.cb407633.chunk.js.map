{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/searchbox/searchbox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","Searchbox","placeholder","handleChange","type","onChange","App","state","search","num","Math","trunc","random","console","log","randomNumber","fetch","then","response","json","users","setState","this","filterMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAgBeA,EAZF,SAACC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,KAEN,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCGTC,EAXE,SAACR,GAChB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCKZO,G,MAVG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCDG,E,kDAlCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,OAAQ,IALE,E,qDASd,WAAqB,IAAD,QAfD,WACnB,IAAIC,EAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC1BC,QAAQC,IAAIL,GAcVM,GACAC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEtB,SAAUqB,S,oBAG/C,WAAU,IAAD,OACP,EAA6BE,KAAKf,MAA1BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,OACZe,EAAiBxB,EAASyB,QAAO,SAAC/B,GACtC,OAAOA,EAAQG,KAAK6B,cAAcC,SAASlB,EAAOiB,kBAEpD,OACE,sBAAKlC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,sBACZC,aAAc,SAACwB,GAAD,OAAO,EAAKN,SAAS,CAAEb,OAAQmB,EAAEC,OAAOC,WAExD,cAAC,EAAD,CAAU9B,SAAUwB,W,GA7BVO,aCEHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cb407633.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../card/card.css\";\r\nimport \"../card-list/card-list\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        alt=\"\"\r\n      />\r\n      <h4>{props.monster.name}</h4>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./card-list.css\";\r\nimport Card from \"../card/card\";\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n        //added key to let react know which element is related to which html tag and make it efficient as it will then only render the item that is updated instead of rendering all of them\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./searchbox.css\";\r\n\r\nconst Searchbox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\nexport default Searchbox;\r\n//functional component is used just to render some html instead of class\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list/card-list\";\nimport Searchbox from \"./components/searchbox/searchbox\";\n\nconst randomNumber = () => {\n  let num = Math.trunc(Math.random() * 100);\n  console.log(num);\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      search: \"\",\n    };\n  }\n\n  componentDidMount() {\n    randomNumber();\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, search } = this.state;\n    const filterMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(search.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Searchbox\n          placeholder=\"Type here to search\"\n          handleChange={(e) => this.setState({ search: e.target.value })}\n        />\n        <CardList monsters={filterMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}